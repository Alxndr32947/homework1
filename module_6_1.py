# Базовый класс Plant, для улучшения читаемости логики кода, определен перед классом Animal
class Plant:
    def __init__(self, name, edible=False):  # Конструктор, с параметром съедобности по умолчанию
        self.edible = edible  # Уникальный атрибут, указывающий, съедобно ли растение
        self.name = name       # Уникальный атрибут, представляющий имя растения

    def __str__(self):  # Метод для строкового представления объекта Plant
        return self.name  # Возвращает имя растения для удобного вывода

# Базовый класс Animal
class Animal:
    def __init__(self, name):  # Конструктор класса Animal
        self.alive = True      # Уникальный атрибут, указывающий, живо ли животное
        self.fed = False       # Уникальный атрибут, указывающий, накормлено ли животное
        self.name = name       # Уникальный атрибут, представляющий имя животного

    def __str__(self):  # Метод для строкового представления объекта Animal
        return self.name  # Возвращает имя животного для удобного вывода

    def eat(self, food):  # Метод для попытки животного съесть еду
        # Проверяем, является ли еда растением и съедобно ли оно
        if isinstance(food, Plant) and food.edible:
            print(f"{self} съел {food}")  # Животное съедает растение
            self.fed = True  # Животное становится накормленным
        else:
            print(f"{self} не стал есть {food}")  # Животное отказывается от еды
            self.alive = False  # Животное погибает из-за отказа от еды

# Класс Flower (Цветок), наследующий поведение Plant
class Flower(Plant):
    def __init__(self, name):  # Конструктор класса Flower
        super().__init__(name, edible=False)  # Цветы по умолчанию несъедобные

# Класс Fruit (Фрукт), наследующий поведение Plant
class Fruit(Plant):
    def __init__(self, name):  # Конструктор класса Fruit
        super().__init__(name, edible=True)  # Фрукты по умолчанию съедобные

# Класс Mammal (Млекопитающее), наследующий поведение Animal
class Mammal(Animal):
    pass  # Использует стандартное поведение класса Animal

# Класс Predator (Хищник), наследующий поведение Animal
class Predator(Animal):
    pass  # Использует стандартное поведение класса Animal

# Основной блок программы
if __name__ == "__main__":
    # Создание объектов
    a1 = Predator('Волк с Уолл-Стрит')  # Создаём хищника с именем "Волк с Уолл-Стрит"
    a2 = Mammal('Хатико')               # Создаём млекопитающее с именем "Хатико"
    p1 = Flower('Цветик семицветик')    # Создаём цветок с именем "Цветик семицветик"
    p2 = Fruit('Заводной апельсин')     # Создаём фрукт с именем "Заводной апельсин"

    # Проверка функциональности программы
    print(a1)  # Выводим имя хищника (используется метод __str__)
    print(p1)  # Выводим имя цветка (используется метод __str__)

    print(a1.alive)  # Проверяем, жив ли хищник (True)
    print(a2.fed)    # Проверяем, накормлено ли млекопитающее (False)

    a1.eat(p1)       # Хищник пытается съесть цветок
    a2.eat(p2)       # Млекопитающее пытается съесть фрукт

    print(a1.alive)  # Проверяем, жив ли хищник после попытки съесть цветок (False)
    print(a2.fed)    # Проверяем, накормлено ли млекопитающее после попытки съесть фрукт (True)

